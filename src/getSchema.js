let cc = DataStudioApp.createCommunityConnector();


//Throws an error if they have not selected the list type for this connector.

function validateConfig(config) {
  var config = config || {};
  if (!config.peopleSelectorType) {
    cc.newUserError()
      .setText('You must select a connector type of either People Data or List Data.')
      .throwException();
  }

  return true;
}

function getSchema(request) {
  console.log(request);

  validateConfig(request.configParams);

  var cc = DataStudioApp.createCommunityConnector();
  var fields = cc.getFields();
  var types = cc.FieldType;

  if(request.configParams.peopleSelectorType == "peopleData"){    
    fields.newDimension()
      .setId('personBirthdate')
      .setName('Birthday')
      .setDescription("The PCO Person's birthdate")
      .setType(types.YEAR_MONTH_DAY)
    

    fields.newDimension()
      .setId('personGender')
      .setName('Gender')
      .setDescription("Gender, as assigned in PCO per person")
      .setType(types.TEXT)
    
    fields.newDimension()
      .setId('personGrade')
      .setName('Grade')
      .setDescription("Grade value pulled from PCO")
      .setType(types.NUMBER)
    
    fields.newDimension()
      .setId('personIsChild')
      .setName('Is a Child')
      .setDescription("This value is true/false based on the info in PCO")
      .setType(types.BOOLEAN)
    
    fields.newDimension()
      .setId('personMembership')
      .setName('Membership')
      .setDescription("This is the person's membership type as pulled by PCO")
      .setType(types.TEXT)
    
    fields.newDimension()
      .setId('personStatus')
      .setName('Profile Status')
      .setDescription("This is either active/inactive. We suggest to filter out inactive profiles from most of your charts.")
      .setType(types.TEXT)




  } else if(request.configParams.peopleSelectorType == "listData") {
    const listId = fields.newDimension()
      .setId('listId')
      .setName('List ID')
      .setDescription("This is the unique ID for each list generated by PCO")
      .setType(types.NUMBER);
    
    const description = fields.newDimension()
      .setId('listDescription')
      .setName('List Description')
      .setDescription("This is a an outline of the rules that are in your PCO List")
      .setType(types.NUMBER);

    const name = fields.newDimension()
      .setId('listName')
      .setName('List Name')
      .setDescription("This is the name of your list, if you have not modified the value it's equal to the list description.")
      .setType(types.NUMBER);


    const categoryId = fields.newDimension()
      .setId('categoryId')
      .setName('Category ID')
      .setDescription("This is the unique ID for each category generated by PCO")
      .setType(types.NUMBER);

    const categoryName = fields.newDimension()
      .setId('categoryName')
      .setName('Category Name')
      .setDescription("This is a named category that you created to sort PCO lists.")
      .setType(types.TEXT)

    
  }

  fields.newDimension()
    .setId('personId')
    .setName('Person Id')
    .setDescription("This is the unique value for each person assigned by PCO.")
    .setType(types.NUMBER)

  fields.newDimension()
    .setId('campusId')
    .setName('Campus ID')
    .setDescription("This is the unique ID for each campus generated by PCO")
    .setType(types.NUMBER)

  fields.newDimension()
    .setId('campusName')
    .setName('Campus Name')
    .setDescription("This is the name for each campus that you've assigned in PCO")
    .setType(types.TEXT)

  fields.newMetric()
    .setId('personCount')
    .setName('Person Count')
    .setType(types.NUMBER)
    .setDescription("This gives a count of one for each person.")
    //.setAggregation(aggregations.AUTO);



  // fields.setDefaultMetric(amountper.getId());
  // fields.setDefaultDimension(created.getId());

  return { 'schema': fields.build() };
}
